#textdomain wesnoth-The_Heist
[scenario]
    id=The_Statues
    next_scenario=The_Guillotine
    name= _ "The Statues"
    victory_when_enemies_defeated=no
    map_data="{@campaigns/The_Heist/maps/The_Statues.map}"

    {SECOND_WATCH}
    {TURNS 50 45 40}

    [music]
        name=wanderer.ogg
    [/music]

    [side]
        side=1
        team_name=randalf
        controller=human
        no_leader=yes
    [/side]

    [side]
        side=2
        team_name=randalf
        controller=null
        no_leader=yes
    [/side]

    [side]
        side=3
        team_name=randalf
        controller=human
        no_leader=yes
    [/side]

#define POINT_LABEL N X Y
    [label]
        x={X}
        y={Y}
        text={N}
    [/label]
#enddef

    {POINT_LABEL 1 14 19}
    {POINT_LABEL 2 18 19}
    {POINT_LABEL 3 22 19}
    {POINT_LABEL 4 26 19}
    {POINT_LABEL 5 30 19}
    {POINT_LABEL 6 34 19}
    {POINT_LABEL 7 38 19}
    {POINT_LABEL 8 42 19}
    {POINT_LABEL 9 46 19}
    {POINT_LABEL 10 50 19}
    {POINT_LABEL 11 54 19}
    {POINT_LABEL 12 58 19}
    {POINT_LABEL 24 14 3}
    {POINT_LABEL 23 18 3}
    {POINT_LABEL 22 22 3}
    {POINT_LABEL 21 26 3}
    {POINT_LABEL 20 30 3}
    {POINT_LABEL 19 34 3}
    {POINT_LABEL 18 38 3}
    {POINT_LABEL 17 42 3}
    {POINT_LABEL 16 46 3}
    {POINT_LABEL 15 50 3}
    {POINT_LABEL 14 54 3}
    {POINT_LABEL 13 58 3}

#define SET_XY VAR_X VAR_Y X Y
    {VARIABLE ({VAR_X}) ({X})}
    {VARIABLE ({VAR_Y}) ({Y})}
#enddef

#define GET_COCK_XY I VARX VARY
    {VARIABLE idx ({I})}
    {VARIABLE_OP ({VARX}) to_variable (cockmove.point$idx|.cockx)}
    {VARIABLE_OP ({VARY}) to_variable (cockmove.point$idx|.cocky)}
#enddef

#define GET_POINT_XY I VARX VARY
    {VARIABLE idx ({I})}
    {VARIABLE_OP ({VARX}) to_variable (cockmove.point$idx|.x)}
    {VARIABLE_OP ({VARY}) to_variable (cockmove.point$idx|.y)}
#enddef

#define INIT_LOCATIONS
    #Set statue locations
    {SET_XY cockmove.point0.x cockmove.point0.y 8-9 13-20}
    {SET_XY cockmove.point25.x cockmove.point25.y 8-9 4-11}

    {SET_XY cockmove.point1.x cockmove.point1.y 12-14 13-17}
    {SET_XY cockmove.point2.x cockmove.point2.y 16-18 13-17}
    {SET_XY cockmove.point3.x cockmove.point3.y 20-22 13-17}
    {SET_XY cockmove.point4.x cockmove.point4.y 24-26 13-17}
    {SET_XY cockmove.point5.x cockmove.point5.y 28-30 13-17}
    {SET_XY cockmove.point6.x cockmove.point6.y 32-34 13-17}
    {SET_XY cockmove.point7.x cockmove.point7.y 38-40 13-17}
    {SET_XY cockmove.point8.x cockmove.point8.y 42-44 13-17}
    {SET_XY cockmove.point9.x cockmove.point9.y 46-48 13-17}
    {SET_XY cockmove.point10.x cockmove.point10.y 50-52 13-17}
    {SET_XY cockmove.point11.x cockmove.point11.y 54-56 13-17}
    {SET_XY cockmove.point12.x cockmove.point12.y 58-60 13-17}
    {SET_XY cockmove.point13.x cockmove.point13.y 58-60 6-11}
    {SET_XY cockmove.point14.x cockmove.point14.y 54-56 6-11}
    {SET_XY cockmove.point15.x cockmove.point15.y 50-52 6-11}
    {SET_XY cockmove.point16.x cockmove.point16.y 46-48 6-11}
    {SET_XY cockmove.point17.x cockmove.point17.y 42-44 6-11}
    {SET_XY cockmove.point18.x cockmove.point18.y 38-40 6-11}
    {SET_XY cockmove.point19.x cockmove.point19.y 32-34 6-11}
    {SET_XY cockmove.point20.x cockmove.point20.y 28-30 6-11}
    {SET_XY cockmove.point21.x cockmove.point21.y 24-26 6-11}
    {SET_XY cockmove.point22.x cockmove.point22.y 20-22 6-11}
    {SET_XY cockmove.point23.x cockmove.point23.y 16-18 6-11}
    {SET_XY cockmove.point24.x cockmove.point24.y 12-14 6-11}

    #Set cockatrice start locations
    {SET_XY cockmove.point1.cockx cockmove.point1.cocky 13 20}
    {SET_XY cockmove.point2.cockx cockmove.point2.cocky 17 20}
    {SET_XY cockmove.point3.cockx cockmove.point3.cocky 21 20}
    {SET_XY cockmove.point4.cockx cockmove.point4.cocky 25 20}
    {SET_XY cockmove.point5.cockx cockmove.point5.cocky 29 20}
    {SET_XY cockmove.point6.cockx cockmove.point6.cocky 33 20}
    {SET_XY cockmove.point7.cockx cockmove.point7.cocky 39 20}
    {SET_XY cockmove.point8.cockx cockmove.point8.cocky 43 20}
    {SET_XY cockmove.point9.cockx cockmove.point9.cocky 47 20}
    {SET_XY cockmove.point10.cockx cockmove.point10.cocky 51 20}
    {SET_XY cockmove.point11.cockx cockmove.point11.cocky 55 20}
    {SET_XY cockmove.point12.cockx cockmove.point12.cocky 59 20}
    {SET_XY cockmove.point13.cockx cockmove.point13.cocky 59 4}
    {SET_XY cockmove.point14.cockx cockmove.point14.cocky 55 4}
    {SET_XY cockmove.point15.cockx cockmove.point15.cocky 51 4}
    {SET_XY cockmove.point16.cockx cockmove.point16.cocky 47 4}
    {SET_XY cockmove.point17.cockx cockmove.point17.cocky 43 4}
    {SET_XY cockmove.point18.cockx cockmove.point18.cocky 39 4}
    {SET_XY cockmove.point19.cockx cockmove.point19.cocky 33 4}
    {SET_XY cockmove.point20.cockx cockmove.point20.cocky 29 4}
    {SET_XY cockmove.point21.cockx cockmove.point21.cocky 25 4}
    {SET_XY cockmove.point22.cockx cockmove.point22.cocky 21 4}
    {SET_XY cockmove.point23.cockx cockmove.point23.cocky 17 4}
    {SET_XY cockmove.point24.cockx cockmove.point24.cocky 13 4}

    #Set cockatrice movement locations (e.g. cockmove.x13y19)
    {VARIABLE i 1}
    [while]
        [variable]
            name=i
            less_than=25
        [/variable]
        [do]
            {GET_COCK_XY $i x y}
            {VARIABLE y1 $y}
            {VARIABLE_OP y1 add -1}
            {VARIABLE y2 $y}
            {VARIABLE_OP y2 add 1}
            {VARIABLE_OP var format (cockmove.x$x|y$y1)}
            {VARIABLE $var $i}
            {VARIABLE_OP var format (cockmove.x$x|y$y2)}
            {VARIABLE $var $i}
            {VARIABLE_OP i add 1}
        [/do]
    [/while]

    #Set cockatrice bar locations
    {VARIABLE cockmove.x8y21 0}
    {VARIABLE cockmove.x8y22 0}
    {VARIABLE cockmove.x8y1 25}
    {VARIABLE cockmove.x8y2 25}

    {VARIABLE remaining_statues1 15}
    {VARIABLE remaining_statues2 15}
#enddef

#define INIT_SIDE SIDE
    {VARIABLE side ({SIDE})}
    [if]
        [variable]
            name=side
            equals=1
        [/variable]
        [then]
            {SET_XY cockmove.enemybar.x cockmove.enemybar.y 1-5 1-3}
            {SET_XY cockmove.point0.x cockmove.point0.y 1-5 21-23}
            {SET_XY cockmove.point0.cockx cockmove.point0.cocky 7 22}
            {SET_XY cockmove.point25.x cockmove.point25.y 8-9 4-11}
            {SET_XY cockmove.point25.cockx cockmove.point25.cocky 0 0}
            {VARIABLE otherside 2}
            {VARIABLE direction 1}
            {VARIABLE home_points.highestpoint 19}
            {VARIABLE_OP home_points.x format ($cockmove.point19.x|,$cockmove.point20.x|,$cockmove.point21.x|,$cockmove.point22.x|,$cockmove.point23.x|,$cockmove.point24.x|,$cockmove.point25.x)}
            {VARIABLE_OP home_points.y format ($cockmove.point19.y|,$cockmove.point20.y|,$cockmove.point21.y|,$cockmove.point22.y|,$cockmove.point23.y|,$cockmove.point24.y|,$cockmove.point25.y)}
        [/then]
        [else]
            {SET_XY cockmove.enemybar.x cockmove.enemybar.y 1-5 21-23}
            {SET_XY cockmove.point0.x cockmove.point0.y 8-9 13-20}
            {SET_XY cockmove.point0.cockx cockmove.point0.cocky 0 0}
            {SET_XY cockmove.point25.x cockmove.point25.y 1-5 1-3}
            {SET_XY cockmove.point25.cockx cockmove.point25.cocky 7 2}
            {VARIABLE otherside 1}
            {VARIABLE direction -1}
            {VARIABLE home_points.highestpoint 6}
            {VARIABLE_OP home_points.x format ($cockmove.point0.x|,$cockmove.point1.x|,$cockmove.point2.x|,$cockmove.point3.x|,$cockmove.point4.x|,$cockmove.point5.x|,$cockmove.point6.x)}
            {VARIABLE_OP home_points.y format ($cockmove.point0.y|,$cockmove.point1.y|,$cockmove.point2.y|,$cockmove.point3.y|,$cockmove.point4.y|,$cockmove.point5.y|,$cockmove.point6.y)}
        [/else]
    [/if]
#enddef

#define CHECK_BEARING_OFF SIDE VAR_ANS
    {VARIABLE ({VAR_ANS}) no}
    [store_unit]
        variable=store
        kill=no
        [filter]
            side={SIDE}
            x=$home_points.x
            y=$home_points.y
        [/filter]
    [/store_unit]
    [if]
        [variable]
            name=store.length
            equals=15
        [/variable]
        [then]
            {VARIABLE ({VAR_ANS}) yes}
            #Find highest point
            {VARIABLE p 0}
            {VARIABLE exit_loop no}
            [while]
                [variable]
                    name=p
                    less_than=6
                [/variable]
                [variable]
                    name=exit_loop
                    equals=no
                [/variable]
                [do]
                    {GET_POINT_XY $home_points.highestpoint high_x high_y}
                    [if]
                        [have_unit]
                            side={SIDE}
                            x=$high_x
                            y=$high_y
                        [/have_unit]
                        [then]
                            {VARIABLE exit_loop yes}
                        [/then]
                        [else]
                            {VARIABLE_OP home_points.highestpoint add $direction}
                        [/else]
                    [/if]
                    {VARIABLE_OP p add 1}
                [/do]
            [/while]
        [/then]
    [/if]
    {CLEAR_VARIABLE store}
    {CLEAR_VARIABLE high_x}
    {CLEAR_VARIABLE high_y}
    {CLEAR_VARIABLE exit_loop}
    {CLEAR_VARIABLE p}
#enddef

#define GET_DICE_XY POINT X1VAR Y1VAR X2VAR Y2VAR
    {GET_COCK_XY ({POINT}) xvar yvar}
    [if]
        [variable]
            name=xvar
            equals=7
        [/variable]
        [then]
            {VARIABLE_OP xvar add 1}
            {VARIABLE ({X1VAR}) $xvar}
            {VARIABLE ({X2VAR}) $xvar}
            {VARIABLE ({Y2VAR}) $yvar}
            {VARIABLE_OP yvar add -1}
            {VARIABLE ({Y1VAR}) $yvar}
        [/then]
        [else]
            {VARIABLE ({X1VAR}) $xvar}
            {VARIABLE ({X2VAR}) $xvar}
            {VARIABLE_OP yvar add -1}
            {VARIABLE ({Y1VAR}) $yvar}
            {VARIABLE_OP yvar add 2}
            {VARIABLE ({Y2VAR}) $yvar}
        [/else]
    [/if]
    {CLEAR_VARIABLE xvar}
    {CLEAR_VARIABLE yvar}
#enddef

#define GET_NEW_POINT POINT_VAR X_VAR Y_VAR SIDE_VAR
    [if]
        [variable]
            name={Y_VAR}
            equals=3
        [/variable]
        [or]
            [variable]
                name={Y_VAR}
                equals=19
            [/variable]
        [/or]
        [or]
            [variable]
                name={X_VAR}
                equals=8
            [/variable]
            [variable]
                name={Y_VAR}
                equals=1
            [/variable]
        [/or]
        [or]
            [variable]
                name={X_VAR}
                equals=8
            [/variable]
            [variable]
                name={Y_VAR}
                equals=21
            [/variable]
        [/or]
        [then]
            {VARIABLE die $die1}
            {VARIABLE die_count_var die1_count}
        [/then]
        [else]
            {VARIABLE die $die2}
            {VARIABLE die_count_var die2_count}
        [/else]
    [/if]

    {VARIABLE_OP die multiply $direction}
    {VARIABLE_OP ({POINT_VAR}) add $die}
    {CLEAR_VARIABLE ytemp}
#enddef

#define CHECK_MOVE X Y SIDE
    [removeitem]
        x={X}
        y={Y}
    [/removeitem]
    {VARIABLE x ({X})}
    {VARIABLE y ({Y})}
    {VARIABLE_OP point to_variable (cockmove.x$x|y$y)}
    {VARIABLE side ({SIDE})}
    {VARIABLE valid_move yes}

    #If statues are in bar, then all other points are invalid
    [if]
        [variable]
            name=x
            greater_than=8
        [/variable]
        [have_unit]
            side={SIDE}
            x=1-5
            y=1-30
        [/have_unit]
        [then]
            {VARIABLE valid_move no}
        [/then]
    [/if]

    #Invalid point if current player does not have any statues
    [if]
        [variable]
            name=valid_move
            equals=yes
        [/variable]
        [then]
            {GET_POINT_XY $point gotx goty}
            [if]
                [have_unit]
                    side={SIDE}
                    x=$gotx
                    y=$goty
                [/have_unit]
                [else]
                    {VARIABLE valid_move no}
                [/else]
            [/if]
        [/then]
    [/if]

    #get point after move
    {VARIABLE old_point $point}
    {GET_NEW_POINT point x y side}

    #Check if invalid bearing off point
    [if]
        [variable]
            name=valid_move
            equals=yes
        [/variable]
        [then]
            #Invalid if out of range 1-24 and not bearing off
            [if]
                [variable]
                    name=is_bearing
                    equals=no
                [/variable]
                [then]
                    [if]
                        [variable]
                            name=point
                            greater_than=24
                        [/variable]
                        [or]
                            [variable]
                                name=point
                                less_than=1
                            [/variable]
                        [/or]
                        [then]
                            {VARIABLE valid_move no}
                        [/then]
                    [/if]
                [/then]
                #Invalid if out of range 0-25, bearing off, and not highest point
                [else]
                    [if]
                        [variable]
                            name=point
                            greater_than=25
                        [/variable]
                        [or]
                            [variable]
                                name=point
                                less_than=0
                            [/variable]
                        [/or]
                        [then]
                            [if]
                                [variable]
                                    name=old_point
                                    equals=$home_points.highestpoint
                                [/variable]
                                [else]
                                    {VARIABLE valid_move no}
                                [/else]
                            [/if]
                        [/then]
                    [/if]
                [/else]
            [/if]
        [/then]
    [/if]

    #Invalid point if other side has 2 or more statues on point
    [if]
        [variable]
            name=valid_move
            equals=yes
        [/variable]
        [then]
            [if]
                [variable]
                    name=point
                    greater_than=-1
                [/variable]
                [variable]
                    name=point
                    less_than=26
                [/variable]
                [then]
                    {GET_POINT_XY $point gotx goty}
                    [store_unit]
                        variable=store
                        kill=no
                        [filter]
                            [not]
                                side=$side
                            [/not]
                            x=$gotx
                            y=$goty
                        [/filter]
                    [/store_unit]
                    [if]
                        [variable]
                            name=store.length
                            greater_than=1
                        [/variable]
                        [then]
                            {VARIABLE valid_move no}
                        [/then]
                    [/if]
                [/then]
            [/if]
        [/then]
    [/if]
#enddef

    #Show dice and cockatrices
#define SHOW_VALID_MOVES SIDE
    {VARIABLE have_move no}
    [kill]
        type=Cockatrice
    [/kill]

    #Check if player can bear off (all statues are home)
    {CHECK_BEARING_OFF ({SIDE}) is_bearing}

    #Show all valid moves
    {VARIABLE i 0}
    [while]
        [variable]
            name=i
            less_than=26
        [/variable]
        [do]
            {GET_COCK_XY $i xcock ycock}
            [if]
                [variable]
                    name=xcock
                    greater_than=0
                [/variable]
                [then]
                    {UNIT_NAMELESS Cockatrice ({SIDE}) $xcock $ycock}
                    {GET_DICE_XY $i xdie1 ydie1 xdie2 ydie2}
                    {CHECK_MOVE $xdie1 $ydie1 ({SIDE})}
                    [if]
                        [variable]
                            name=valid_move
                            equals=yes
                        [/variable]
                        [variable]
                            name=die1_count
                            greater_than=0
                        [/variable]
                        [then]
                            {VARIABLE have_move yes}
                            {VARIABLE_OP var format (cockmove.x$xdie1|y$ydie1|.valid)}
                            {VARIABLE $var yes}
                            {PLACE_IMAGE $die_img1 $xdie1 $ydie1}
                        [/then]
                        [else]
                            {VARIABLE_OP var format (cockmove.x$xdie1|y$ydie1|.valid)}
                            {VARIABLE $var no}
                        [/else]
                    [/if]

                    {CHECK_MOVE $xdie2 $ydie2 ({SIDE})}
                    [if]
                        [variable]
                            name=valid_move
                            equals=yes
                        [/variable]
                        [variable]
                            name=die2_count
                            greater_than=0
                        [/variable]
                        [then]
                            {VARIABLE have_move yes}
                            {VARIABLE_OP var format (cockmove.x$xdie2|y$ydie2|.valid)}
                            {VARIABLE $var yes}
                            {PLACE_IMAGE $die_img2 $xdie2 $ydie2}
                        [/then]
                        [else]
                            {VARIABLE_OP var format (cockmove.x$xdie2|y$ydie2|.valid)}
                            {VARIABLE $var no}
                        [/else]
                    [/if]
                [/then]
            [/if]
            {VARIABLE_OP i add 1}
        [/do]
    [/while]
#enddef

#define ROLL_DICE SIDE
    {INIT_SIDE ({SIDE})}
    {VARIABLE side ({SIDE})}
    [if]
        [variable]
            name=side
            equals=1
        [/variable]
        [then]
            {UNIT_MSG (description=Randalf) ( _ "Rodollio Fortossia!")}
            {FLASH_SCREEN red 1}
        [/then]
        [else]
            {UNIT_MSG (description=Ursula) ( _ "Rodollio Fortossia!")}
            {FLASH_SCREEN blue 1}
        [/else]
    [/if]

    {VARIABLE die1_count 1}
    {VARIABLE die2_count 1}
    #Roll Dice
    {VARIABLE_OP die1 random 1..6}
    {VARIABLE_OP die2 random 1..6}
    #Check if rolled double
    [if]
        [variable]
            name=die1
            equals=$die2
        [/variable]
        [then]
            {VARIABLE die1_count 2}
            {VARIABLE die2_count 2}
        [/then]
    [/if]

    {VARIABLE_OP die_img1 format (misc/die-$die1|.png)}
    {VARIABLE_OP die_img2 format (misc/die-$die2|.png)}
    {SHOW_VALID_MOVES ({SIDE})}
#enddef

#define FIND_VACANT_XY X_LIST Y_LIST X_VAR Y_VAR
    [store_locations]
        variable=locs
        x={X_LIST}
        y={Y_LIST}
        terrain=Ch,Cud,Ce,Chw
    [/store_locations]
    {FOREACH locs i}
    {VARIABLE_OP loc_x to_variable (locs[$i|].x)}
    {VARIABLE_OP loc_y to_variable (locs[$i|].y)}
    [if]
        [have_unit]
            x=$loc_x
            y=$loc_y
        [/have_unit]
        [else]
            {VARIABLE ({X_VAR}) $loc_x}
            {VARIABLE ({Y_VAR}) $loc_y}
        [/else]
    [/if]
    {NEXT i}
    {CLEAR_VARIABLE locs}
    {CLEAR_VARIABLE loc_x}
    {CLEAR_VARIABLE loc_y}
#enddef

#define TELEPORT_STATUE FROM_X FROM_Y TO_X TO_Y SHOW_MOVE
    {VARIABLE show_move ({SHOW_MOVE})}
    [if]
        [variable]
            name=show_move
            equals=yes
        [/variable]
        [then]
            [scroll_to]
                x={TO_X}
                y={TO_Y}
            [/scroll_to]
        [/then]
    [/if]
    [delay]
        time=500
    [/delay]
    [teleport]
        [filter]
            x={FROM_X}
            y={FROM_Y}
        [/filter]
        x={TO_X}
        y={TO_Y}
    [/teleport]
    [redraw] [/redraw]
#enddef

#define UNSTONE_STATUES
    {UNIT_MSG (description=Randalf) ( _ "Platu! Verata! Bichtu!")}
    [unstone] [/unstone]
    [redraw] [/redraw]
    {UNIT_MSG (description=Ursula) ( _ "Folgana! Padrona! Sempara!")}
#enddef

#define MOVE_STATUE SIDE X Y
    {VARIABLE side ({SIDE})}
    {VARIABLE varx ({X})}
    {VARIABLE vary ({Y})}

    {VARIABLE_OP valid_var to_variable (cockmove.x$varx|y$vary|.valid)}
    [if]
        [variable]
            name=valid_var
            equals=yes
        [/variable]
        [then]
            {VARIABLE_OP point to_variable (cockmove.x$varx|y$vary)}

            #get x and y of a unit at point
            {GET_POINT_XY $point x y}
            [store_unit]
                variable=store
                kill=no
                [filter]
                    x=$x
                    y=$y
                [/filter]
            [/store_unit]

            {VARIABLE from_x $store.x}
            {VARIABLE from_y $store.y}

            #get x and y of vacant location at new point
            {GET_NEW_POINT point varx vary side}

            [if]
                [variable]
                    name=point
                    greater_than=25
                [/variable]
                [then]
                    {VARIABLE point 25}
                [/then]
            [/if]
            [if]
                [variable]
                    name=point
                    less_than=0
                [/variable]
                [then]
                    {VARIABLE point 0}
                [/then]
            [/if]

            #check if player got statue to goal
            [if]
                [variable]
                    name=point
                    equals=0
                [/variable]
                [or]
                    [variable]
                        name=point
                        equals=25
                    [/variable]
                [/or]
                [then]
                    {VARIABLE_OP remaining_var format (remaining_statues$side)}
                    {VARIABLE_OP $remaining_var add -1}
                [/then]
            [/if]

            {GET_POINT_XY $point x y}
            {FIND_VACANT_XY $x $y to_x to_y}

            {TELEPORT_STATUE $from_x $from_y $to_x $to_y yes}

            #move enemy to bar if he is on same point
            {GET_POINT_XY $point x y}
            [store_unit]
                variable=store
                kill=no
                [filter]
                    x=$x
                    y=$y
                    side=$otherside
                [/filter]
            [/store_unit]
            {VARIABLE n $store.length}
            [if]
                [variable]
                    name=n
                    greater_than=0
                [/variable]
                [then]
                    {VARIABLE from_x $store.x}
                    {VARIABLE from_y $store.y}
                    {FIND_VACANT_XY $cockmove.enemybar.x $cockmove.enemybar.y to_x to_y}
                    {TELEPORT_STATUE $from_x $from_y $to_x $to_y no}
                [/then]
            [/if]
            {CLEAR_VARIABLE store}
            {VARIABLE_OP $die_count_var add -1}

            [if]
                [variable]
                    name=remaining_statues1
                    equals=0
                [/variable]
                [then]
                    [endlevel]
                        result=continue
                    [/endlevel]
                [/then]
            [/if]
            [if]
                [variable]
                    name=remaining_statues2
                    equals=0
                [/variable]
                [then]
                    {UNIT_MSG (description=Randalf) ( _ "I cannot believe I lost!")}
                    {UNIT_MSG (description=Ursula)  ( _ "Unstone the statues, Randalf.")}
                    {UNSTONE_STATUES}
                    {UNIT_MSG (description=Ursula) ( _ "You must all obey me now. Bring me the stone of Kahandari from King Gerald's dungeon. Kill all who stand in your way!")}
                    {UNIT_MSG (description=Bill) ( _ "Yes, Master!")}
                    {UNIT_MSG (description=Randalf) ( _ "What about Zilead?")}
                    {UNIT_MSG (description=Ursula) ( _ "Forget about your friend, Randalf. My army is not strong enough to defeat two kings. Zilead's fate is no longer in your hands.")}
                    [endlevel]
                        result=defeat
                    [/endlevel]
                [/then]
            [/if]
        [/then]
    [/if]

    {SHOW_VALID_MOVES ({SIDE})}
#enddef

#define AI_ADD_MOVE INDEX COCKX COCKY DIEX DIEY
    {VARIABLE new_point ({INDEX})}
    {VARIABLE dx ({DIEX})}
    {VARIABLE dy ({DIEY})}
    {VARIABLE_OP valid_var to_variable (cockmove.x$dx|y$dy|.valid)}
    [if]
        [variable]
            name=valid_var
            equals=yes
        [/variable]
        [variable]
            name=found_best_move
            equals=no
        [/variable]
        [then]
            {VARIABLE_OP var format (validmoves.move$n_valid|.cockx)}
            {VARIABLE $var ({COCKX})}
            {VARIABLE_OP var format (validmoves.move$n_valid|.cocky)}
            {VARIABLE $var ({COCKY})}

            {VARIABLE_OP var format (validmoves.move$n_valid|.x)}
            {VARIABLE $var $dx}
            {VARIABLE_OP var format (validmoves.move$n_valid|.y)}
            {VARIABLE $var $dy}

            #If not bearing off, find a move to/from single-statue points
            [if]
                [variable]
                    name=is_bearing
                    equals=no
                [/variable]
                [then]
                    #store units at current point and store units at new point
                    {GET_POINT_XY $new_point from_x from_y}
                    {GET_NEW_POINT new_point dx dy 2}
                    {GET_POINT_XY $new_point to_x to_y}
                    [store_unit]
                        variable=store_from
                        kill=no
                        [filter]
                            x=$from_x
                            y=$from_y
                        [/filter]
                    [/store_unit]
                    [store_unit]
                        variable=store_to
                        kill=no
                        [filter]
                            x=$to_x
                            y=$to_y
                        [/filter]
                    [/store_unit]
                    {VARIABLE n_from $store_from.length}
                    {VARIABLE n_to $store_to.length}
                    #Find a good location
                    [if]
                        #from multi-statue (3+) point to any single-statue point
                        [variable]
                            name=n_from
                            greater_than=2
                        [/variable]
                        [variable]
                            name=n_to
                            equals=1
                        [/variable]
                        #from any point to single-statue randalf point
                        [or]
                            [variable]
                                name=n_to
                                equals=1
                            [/variable]
                            [variable]
                                name=store_to.side
                                equals=1
                            [/variable]
                        [/or]
                        #from single-statue point to non-empty ursula point
                        [or]
                            [variable]
                                name=n_from
                                equals=1
                            [/variable]
                            [variable]
                                name=n_to
                                greater_than=0
                            [/variable]
                            [variable]
                                name=store_to[0].side
                                equals=2
                            [/variable]
                        [/or]
                        [then]
                            {VARIABLE move_idx $n_valid}
                            #Best move is one that puts randalf's statue in bar
                            [if]
                                [variable]
                                    name=store_to[0].side
                                    equals=1
                                [/variable]
                                [then]
                                    {VARIABLE found_best_move yes}
                                [/then]
                            [/if]
                        [/then]
                    [/if]
                    #Or find a move that move a single statue to a non-empty point
                    {CLEAR_VARIABLE store_from}
                    {CLEAR_VARIABLE store_to}
                    {CLEAR_VARIABLE from_x}
                    {CLEAR_VARIABLE to_x}
                    {CLEAR_VARIABLE from_y}
                    {CLEAR_VARIABLE to_y}
                    {CLEAR_VARIABLE n_from}
                    {CLEAR_VARIABLE n_to}
                [/then]
            [/if]
            {VARIABLE_OP n_valid add 1}
        [/then]
    [/if]
    {CLEAR_VARIABLE dx}
    {CLEAR_VARIABLE dy}
    {CLEAR_VARIABLE new_point}
#enddef

#define AI_MOVE
    {VARIABLE n_valid 1}

    #Check if player can bear off (all statues are home)
    {CHECK_BEARING_OFF 1 is_bearing_randalf}
    {CHECK_BEARING_OFF 2 is_bearing}

    #Keep moving statues until all moves were made
    [while]
        [variable]
            name=n_valid
            greater_than=0
        [/variable]
        [do]
            [if]
                [variable]
                    name=is_bearing
                    equals=yes
                [/variable]
                [or]
                    [variable]
                        name=is_bearing_randalf
                        equals=yes
                    [/variable]
                [/or]
                #either side is bearing off: check moves from 1 to 25
                [then]
                    {VARIABLE i 1}
                    {VARIABLE i_inc 1}
                [/then]
                #not bearing off: check moves from 25 (bar) to 2
                [else]
                    {VARIABLE i 25}
                    {VARIABLE i_inc -1}
                [/else]
            [/if]

            {VARIABLE n_valid 0}
            {VARIABLE found_best_move no}
            {VARIABLE move_idx 0}
            #Find all valid moves
            [while]
                [variable]
                    name=i
                    greater_than=0
                [/variable]
                [variable]
                    name=i
                    less_than=26
                [/variable]
                [do]
                    {GET_COCK_XY $i cockx cocky}
                    #Get all valid die1 moves
                    {GET_DICE_XY $i diex1 diey1 diex2 diey2}
                    {AI_ADD_MOVE $i $cockx $cocky $diex1 $diey1}
                    {AI_ADD_MOVE $i $cockx $cocky $diex2 $diey2}
                    {VARIABLE_OP i add $i_inc}
                [/do]
            [/while]
            #Make one move
            [if]
                [variable]
                    name=n_valid
                    greater_than=0
                [/variable]
                [then]
                    {VARIABLE_OP cockx to_variable (validmoves.move$move_idx|.cockx)}
                    {VARIABLE_OP cocky to_variable (validmoves.move$move_idx|.cocky)}
                    {VARIABLE_OP x to_variable (validmoves.move$move_idx|.x)}
                    {VARIABLE_OP y to_variable (validmoves.move$move_idx|.y)}

                    [scroll_to]
                        x=$cockx
                        y=$cocky
                    [/scroll_to]
                    [delay]
                        time=500
                    [/delay]
                    [kill]
                        type=Cockatrice
                        x=$cockx
                        y=$cocky
                    [/kill]
                    {VARIABLE_OP movex format ($cockx|,$x)}
                    {VARIABLE_OP movey format ($cocky|,$y)}
                    [move_unit_fake]
                        type=Cockatrice
                        x=$movex
                        y=$movey
                    [/move_unit_fake]
                    {UNIT_NAMELESS Cockatrice 2 $x $y}
                    [redraw] [/redraw]
                    [delay]
                        time=500
                    [/delay]
                    {MOVE_STATUE 2 $x $y}
                [/then]
            [/if]
        [/do]
    [/while]

#enddef

#define CREATE_CHECKER TYPE SIDE X Y
    [unit]
        side={SIDE}
        type={TYPE}
        description={TYPE}
        x={X}
        y={Y}
        [status]
            stone=on
        [/status]
    [/unit]
#enddef

    [event]
        name=prestart

        [objectives]
            summary=Play a game of backgammon
            note="Press 'End Turn' to begin"
            [objective]
                description= _ "Beat Ursula"
                condition=win
            [/objective]
            [objective]
                description= _ "Ursula wins"
                condition=lose
            [/objective]
            [objective]
                description= _ "Turns run out"
                condition=lose
            [/objective]
        [/objectives]

        {UNIT_LEADER (Elder Mage) Randalf ( _ "Randalf") 1 6 7}

        {VARIABLE have_move no}

        {CREATE_CHECKER (Paladin) 2 13 7}

        #Show Bill Checker
        {VARIABLE bill_store.status.stone on}
        {UNSTORE_AT bill_store 1 13 16}
        {CLEAR_VARIABLE bill_store}
        #Show Judas/Fencer checker
        {VARIABLE n $judas_store.length}
        [if]
            [variable]
                name=n
                greater_than=0
            [/variable]
            [then]
                {VARIABLE judas_store.status.stone on}
                {UNSTORE_AT judas_store 2 13 8}
                {CLEAR_VARIABLE judas_store}
            [/then]
            [else]
                {CREATE_CHECKER Fencer 2 13 8}
            [/else]
        [/if]

        {CLEAR_VARIABLE bill_store}
        {CLEAR_VARIABLE judas_store}

        {CREATE_CHECKER (Goblin Knight) 1 13 17}

        {CREATE_CHECKER (Dwarvish Dragonguard) 1 33 7}
        {CREATE_CHECKER (Dragoon) 1 33 8}
        {CREATE_CHECKER (Orcish Warrior) 1 33 9}
        {CREATE_CHECKER (Elvish Marksman) 1 33 10}
        {CREATE_CHECKER (Master Bowman) 1 33 11}

        {CREATE_CHECKER Assassin 2 33 13}
        {CREATE_CHECKER (Elvish Captain) 2 33 14}
        {CREATE_CHECKER (Orcish Warlord) 2 33 15}
        {CREATE_CHECKER (Iron Mauler) 2 33 16}
        {CREATE_CHECKER (Dwarvish Lord) 2 33 17}

        {CREATE_CHECKER (Dwarvish Thunderguard) 1 43 7}
        {CREATE_CHECKER (Orcish Crossbowman) 1 43 8}
        {CREATE_CHECKER (Bowman) 1 43 9}

        {CREATE_CHECKER (Spearman) 2 43 15}
        {CREATE_CHECKER (Orcish Archer) 2 43 16}
        {CREATE_CHECKER (Elvish Hero) 2 43 17}

        {CREATE_CHECKER (Dwarvish Berserker) 2 59 7}
        {CREATE_CHECKER (Lancer) 2 59 8}
        {CREATE_CHECKER (Orcish Slayer) 2 59 9}
        {CREATE_CHECKER (Javelineer) 2 59 10}
        {CREATE_CHECKER (Elvish Ranger) 2 59 11}

        {CREATE_CHECKER (Elvish Marshal) 1 59 13}
        {CREATE_CHECKER (Pikeman) 1 59 14}
        {CREATE_CHECKER (Orcish Leader) 1 59 15}
        {CREATE_CHECKER (Elvish Rider) 1 59 16}
        {CREATE_CHECKER (Dwarvish Steelclad) 1 59 17}
    [/event]

    [event]
        name=start
        {INIT_LOCATIONS}
        {UNIT_LEADER (Witch) Ursula ( _ "Ursula") 2 36 23}
        {MOVE_UNIT (description=Ursula) 6 8}

        [redraw]  [/redraw]
        {UNIT_MSG (description=Randalf) ( _ "Welcome, Master.")}
        {UNIT_MSG (description=Ursula) ( _ "Why have you summoned me, Randalf?")}
        {UNIT_MSG (description=Randalf) ( _ "A friend of mine has gotten himself into a most unfortunate predicament. I must rescue him, but I'm afraid I cannot do it alone.")}
        {UNIT_MSG (description=Ursula) ( _ "Randalf, you know that my presence in Wesnoth must be kept secret. Besides, I will not help you save that fool you call a friend.")}
        {UNIT_MSG (description=Randalf) ( _ "All I ask is that you put a spell on my statues. They will not obey me otherwise.")}
        {UNIT_MSG (description=Ursula) ( _ "Let me see if I understand. You wish to lead an army composed of men, elves, dwarves, and orcs to rescue a useless mortal?")}
        {UNIT_MSG (description=Randalf) ( _ "And after he is rescued, I shall lead that army to King Gerald's castle to retrieve the stone of Kahandari from his dungeon.")}
        {UNIT_MSG (description=Ursula) ( _ "The stone of Kahandari? Are you certain it is in Gerald's possession?")}
        {UNIT_MSG (description=Randalf) ( _ "Positive.")}
        {UNIT_MSG (description=Ursula) ( _ "Fine, I will put a spell on your statues if you bring me the stone.")}
        {UNIT_MSG (description=Randalf) ( _ "That's not quite what I had in mind. I have been searching for that stone for over fifty years. I cannot just hand it over to you.")}
        {UNIT_MSG (description=Ursula) ( _ "What do you have in mind, Randalf?")}
        {UNIT_MSG (description=Randalf) ( _ "You will put a spell on my statues. But first, we will play a quick game of Ifranjiah to determine the stone's new possessor.")}
        {UNIT_MSG (description=Ursula) ( _ "Fine.")}

        {MOVE_UNIT (description=Ursula) 6 16}
        {MODIFY_UNIT (description=Ursula) facing se}
    [/event]

    #For some reason, Randalf must be in keep to roll dice
    [event]
        name=moveto
        first_time_only=no
        [filter]
            description=Randalf
        [/filter]
        [teleport]
            x,y=6,7
            [filter]
                x=$x1
                y=$y1
            [/filter]
        [/teleport]
    [/event]

    [event]
        name=moveto
        first_time_only=no
        [filter]
            type=Cockatrice
            side=1
        [/filter]
        {MOVE_STATUE 1 $x1 $y1}
    [/event]

    #Don't begin until second turn
    [event]
        name=turn 2
        [event]
            name=new turn
            first_time_only=no
            [if]
                [variable]
                    name=have_move
                    equals=yes
                [/variable]
                [then]
                    {UNIT_MSG (description=Ursula) ( _ "It is still your turn, Randalf.")}
                [/then]
                [else]
                    {ROLL_DICE 2}    #Ursula is first
                    {AI_MOVE}
                    {ROLL_DICE 1}
                [/else]
            [/if]
        [/event]
    [/event]

    [event]
        name=time over
        {UNIT_MSG (description=Randalf) ( _ "This game has taken longer than anticipated. I will be unable to reach Theomund's castle in time. Zilead will be executed.")}
    [/event]

    [event]
        name=victory
        {CLEAR_VARIABLE cockmove}
        {CLEAR_VARIABLE homepoints}
        {CLEAR_VARIABLE remaining_statues1}
        {CLEAR_VARIABLE remaining_statues2}

        {UNIT_MSG (description=Ursula) ( _ "Well played, Randalf. I will put a spell on your statues, but I implore you to reconsider your rescue mission. Your new army is not strong enough to defeat two kings. The stone is of far more significance than that friend of yours.")}
        {UNIT_MSG (description=Randalf) ( _ "Do not worry, Master. I will retrieve the stone.")}
        {UNSTONE_STATUES}
        {UNIT_MSG (description=Randalf) ( _ "You must all obey me now.")}
        {UNIT_MSG (description=Bill) ( _ "Yes, Master!")}

        {STORE_UNITS randalf_store (description=Randalf) no}
        {STORE_UNITS side_randalf_store (
        [not]
            description=Randalf
        [/not]
        [not]
            description=Ursula
        [/not]
        [not]
            type=Cockatrice
        [/not]) no}

        {CLEAR_VARIABLE home_points}
        {CLEAR_VARIABLE cockmove}
        {CLEAR_VARIABLE otherside}
        {CLEAR_VARIABLE remaining_statues1}
        {CLEAR_VARIABLE remaining_statues2}
    [/event]
[/scenario]
